package VistaGestorEmpleados;

import GestionEmpleados.Empleado;
import GestionEmpleados.*;
import GestionEmpleados.Enum.TipoContrato;
import static GestionEmpleados.Enum.TipoContrato.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class AdminEmpleados extends javax.swing.JPanel {

    GestorEmpleados gestor;
    DefaultTableModel modelo = new DefaultTableModel();
    
    public AdminEmpleados(GestorEmpleados gestor) {
        initComponents();
        this.setSize(840, 600);
        this.gestor = gestor;

        // Deshabilita campos de búsqueda
        TxtBusNom.setEditable(false);
        TxtBusApp.setEditable(false);
        TxtBusCorreo.setEditable(false);
        TxtBusDNI.setEditable(false);

        // Cargar ComboBoxes de área
        cargarComboAreas();

        // Configurar tabla
        modelo = configurarTabla();
        refrescarTablaEmpleados();
        PanelModificar1.setSize(270,307);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelDespedir = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        TxtBusNom = new javax.swing.JTextField();
        TxtBusApp = new javax.swing.JTextField();
        TxtBusDNI = new javax.swing.JTextField();
        TxtBusCorreo = new javax.swing.JTextField();
        TxtBusID = new javax.swing.JTextField();
        btnMostrarAsis = new javax.swing.JButton();
        btnDespedir = new javax.swing.JButton();
        PanelModificar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        TxtModID = new javax.swing.JTextField();
        TxtModNom = new javax.swing.JTextField();
        TxtModApp = new javax.swing.JTextField();
        TxtModDNI = new javax.swing.JTextField();
        TxtModCorreo = new javax.swing.JTextField();
        CboxModCont = new javax.swing.JComboBox<>();
        CboxModArea = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        BtnMod = new javax.swing.JButton();
        TxtModJefe = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        TxtCargo = new javax.swing.JTextField();
        PanelBusqueda = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        jsEmpleados = new javax.swing.JScrollPane();
        tbLista = new javax.swing.JTable();
        jtBuscar = new javax.swing.JTabbedPane();
        panelIdBuscar = new javax.swing.JPanel();
        lblIDBuscar = new javax.swing.JLabel();
        txtIdBuscar = new javax.swing.JTextField();
        panelAreaBuscar = new javax.swing.JPanel();
        lbIdAreaBuscar = new javax.swing.JLabel();
        CboxBusqCargo = new javax.swing.JComboBox<>();
        panelEstadoLaboralBuscar = new javax.swing.JPanel();
        lblEstadoBuscar = new javax.swing.JLabel();
        CboxBusContr = new javax.swing.JComboBox<>();
        lblBuscarOpc = new javax.swing.JLabel();
        PanelModificar1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        TxtEmpID = new javax.swing.JTextField();
        TxtEmpNom = new javax.swing.JTextField();
        TxtEmpApp = new javax.swing.JTextField();
        TxtEmpDNI = new javax.swing.JTextField();
        TxtEmpCorreo = new javax.swing.JTextField();
        CboxContr = new javax.swing.JComboBox<>();
        CboxCargo = new javax.swing.JComboBox<>();
        CboxArea = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        BntRegistrar = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        TxtEmpJefe = new javax.swing.JTextField();

        setBackground(new java.awt.Color(17, 50, 77));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PanelDespedir.setBorder(javax.swing.BorderFactory.createTitledBorder("DespedirEmpleado"));

        jLabel16.setText("ID Empleado:");

        jLabel18.setText("Nombre:");

        jLabel19.setText("Apellido:");

        jLabel20.setText("DNI:");

        jLabel21.setText("Correo:");

        btnMostrarAsis.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnMostrarAsis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lista-del-portapapeles.png"))); // NOI18N
        btnMostrarAsis.setText("Mostrar Datos");
        btnMostrarAsis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarAsisActionPerformed(evt);
            }
        });

        btnDespedir.setText("Despedir");
        btnDespedir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDespedirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelDespedirLayout = new javax.swing.GroupLayout(PanelDespedir);
        PanelDespedir.setLayout(PanelDespedirLayout);
        PanelDespedirLayout.setHorizontalGroup(
            PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelDespedirLayout.createSequentialGroup()
                .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelDespedirLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TxtBusDNI, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .addComponent(TxtBusCorreo)))
                    .addGroup(PanelDespedirLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TxtBusID))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelDespedirLayout.createSequentialGroup()
                        .addGap(0, 6, Short.MAX_VALUE)
                        .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMostrarAsis, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDespedir, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelDespedirLayout.createSequentialGroup()
                                .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(PanelDespedirLayout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addGap(25, 25, 25))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelDespedirLayout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TxtBusNom, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                    .addComponent(TxtBusApp))))))
                .addContainerGap())
        );
        PanelDespedirLayout.setVerticalGroup(
            PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelDespedirLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtBusID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMostrarAsis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(TxtBusNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(TxtBusApp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(TxtBusDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelDespedirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(TxtBusCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(btnDespedir)
                .addContainerGap())
        );

        add(PanelDespedir, new org.netbeans.lib.awtextra.AbsoluteConstraints(292, 6, -1, -1));

        PanelModificar.setBorder(javax.swing.BorderFactory.createTitledBorder("ModificarEmpleado"));
        PanelModificar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("ID Empleado:");
        PanelModificar.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 27, -1, -1));

        jLabel2.setText("Nombre:");
        PanelModificar.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 55, -1, -1));

        jLabel3.setText("Apellido:");
        PanelModificar.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 83, -1, -1));

        jLabel5.setText("DNI:");
        PanelModificar.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 111, -1, -1));

        jLabel6.setText("Correo:");
        PanelModificar.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 139, -1, -1));

        TxtModID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtModIDActionPerformed(evt);
            }
        });
        PanelModificar.add(TxtModID, new org.netbeans.lib.awtextra.AbsoluteConstraints(101, 24, 158, -1));
        PanelModificar.add(TxtModNom, new org.netbeans.lib.awtextra.AbsoluteConstraints(101, 52, 158, -1));
        PanelModificar.add(TxtModApp, new org.netbeans.lib.awtextra.AbsoluteConstraints(101, 80, 158, -1));
        PanelModificar.add(TxtModDNI, new org.netbeans.lib.awtextra.AbsoluteConstraints(101, 108, 158, -1));
        PanelModificar.add(TxtModCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(101, 136, 158, -1));

        CboxModCont.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "DISCAPACIDAD", "TEMPORAL", "RENOVABLE", "INDEFINIDO", "DESPEDIDO" }));
        CboxModCont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CboxModContActionPerformed(evt);
            }
        });
        PanelModificar.add(CboxModCont, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 164, 160, -1));

        CboxModArea.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        PanelModificar.add(CboxModArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 220, 160, -1));

        jLabel13.setText("Tipo Contrato:");
        PanelModificar.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 167, -1, -1));

        jLabel14.setText("Cargo:");
        PanelModificar.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        jLabel15.setText("Área:");
        PanelModificar.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 223, -1, -1));

        BtnMod.setText("Buscar");
        BtnMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnModActionPerformed(evt);
            }
        });
        PanelModificar.add(BtnMod, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 279, -1, -1));
        PanelModificar.add(TxtModJefe, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 248, 160, -1));

        jLabel34.setText("Id Jefe:");
        PanelModificar.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 248, -1, -1));

        TxtCargo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        PanelModificar.add(TxtCargo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 160, -1));

        add(PanelModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(568, 6, 266, 310));

        PanelBusqueda.setBackground(new java.awt.Color(255, 255, 255));
        PanelBusqueda.setBorder(javax.swing.BorderFactory.createTitledBorder("PanelBusqueda"));

        btnBuscar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ver.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jsEmpleados.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista Empleados"));
        jsEmpleados.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tbLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jsEmpleados.setViewportView(tbLista);

        jtBuscar.setToolTipText("");

        lblIDBuscar.setText("Id Empleado:");

        javax.swing.GroupLayout panelIdBuscarLayout = new javax.swing.GroupLayout(panelIdBuscar);
        panelIdBuscar.setLayout(panelIdBuscarLayout);
        panelIdBuscarLayout.setHorizontalGroup(
            panelIdBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIdBuscarLayout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(lblIDBuscar)
                .addGap(18, 18, 18)
                .addComponent(txtIdBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addGap(171, 171, 171))
        );
        panelIdBuscarLayout.setVerticalGroup(
            panelIdBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIdBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtIdBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblIDBuscar))
        );

        jtBuscar.addTab("ID", panelIdBuscar);

        lbIdAreaBuscar.setText("Cargo");

        CboxBusqCargo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "OPERARIO", "SUPERVISOR", "JEFE" }));

        javax.swing.GroupLayout panelAreaBuscarLayout = new javax.swing.GroupLayout(panelAreaBuscar);
        panelAreaBuscar.setLayout(panelAreaBuscarLayout);
        panelAreaBuscarLayout.setHorizontalGroup(
            panelAreaBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAreaBuscarLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(lbIdAreaBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CboxBusqCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );
        panelAreaBuscarLayout.setVerticalGroup(
            panelAreaBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAreaBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lbIdAreaBuscar)
                .addComponent(CboxBusqCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jtBuscar.addTab("Cargo", panelAreaBuscar);

        lblEstadoBuscar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEstadoBuscar.setText("Tipo:");

        CboxBusContr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "DISCAPACIDAD", "TEMPORAL", "RENOVABLE", "INDEFINIDO", "DESPEDIDO" }));

        javax.swing.GroupLayout panelEstadoLaboralBuscarLayout = new javax.swing.GroupLayout(panelEstadoLaboralBuscar);
        panelEstadoLaboralBuscar.setLayout(panelEstadoLaboralBuscarLayout);
        panelEstadoLaboralBuscarLayout.setHorizontalGroup(
            panelEstadoLaboralBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEstadoLaboralBuscarLayout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(lblEstadoBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CboxBusContr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(170, Short.MAX_VALUE))
        );
        panelEstadoLaboralBuscarLayout.setVerticalGroup(
            panelEstadoLaboralBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEstadoLaboralBuscarLayout.createSequentialGroup()
                .addGroup(panelEstadoLaboralBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CboxBusContr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEstadoBuscar))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jtBuscar.addTab("Contrato", panelEstadoLaboralBuscar);

        lblBuscarOpc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBuscarOpc.setText("Buscar por(en blanco para todos):");

        javax.swing.GroupLayout PanelBusquedaLayout = new javax.swing.GroupLayout(PanelBusqueda);
        PanelBusqueda.setLayout(PanelBusquedaLayout);
        PanelBusquedaLayout.setHorizontalGroup(
            PanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBusquedaLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(PanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jsEmpleados)
                    .addGroup(PanelBusquedaLayout.createSequentialGroup()
                        .addGroup(PanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelBusquedaLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(PanelBusquedaLayout.createSequentialGroup()
                                .addComponent(lblBuscarOpc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        PanelBusquedaLayout.setVerticalGroup(
            PanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBusquedaLayout.createSequentialGroup()
                .addGroup(PanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelBusquedaLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(lblBuscarOpc)
                        .addGap(6, 6, 6)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jsEmpleados, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(PanelBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 320, 828, -1));

        PanelModificar1.setBorder(javax.swing.BorderFactory.createTitledBorder("ModificarEmpleado"));
        PanelModificar1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setText("ID Empleado:");
        PanelModificar1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 27, -1, -1));

        jLabel8.setText("Nombre:");
        PanelModificar1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 55, -1, -1));

        jLabel9.setText("Apellido:");
        PanelModificar1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 83, -1, -1));

        jLabel10.setText("DNI:");
        PanelModificar1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 111, -1, -1));

        jLabel11.setText("Correo:");
        PanelModificar1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 139, -1, -1));
        PanelModificar1.add(TxtEmpID, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 24, 150, -1));
        PanelModificar1.add(TxtEmpNom, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 52, 150, -1));
        PanelModificar1.add(TxtEmpApp, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 80, 150, -1));
        PanelModificar1.add(TxtEmpDNI, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 108, 150, -1));
        PanelModificar1.add(TxtEmpCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 136, 150, -1));

        CboxContr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "DISCAPACIDAD", "TEMPORAL", "RENOVABLE", "INDEFINIDO", "DESPEDIDO" }));
        PanelModificar1.add(CboxContr, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 164, 150, -1));

        CboxCargo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "OPERARIO", "SUPERVIDOR", "JEFE" }));
        CboxCargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CboxCargoActionPerformed(evt);
            }
        });
        PanelModificar1.add(CboxCargo, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 192, 150, -1));

        CboxArea.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        PanelModificar1.add(CboxArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 220, 150, -1));

        jLabel30.setText("Tipo Contrato:");
        PanelModificar1.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 167, -1, -1));

        jLabel31.setText("Cargo:");
        PanelModificar1.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 195, -1, -1));

        jLabel32.setText("Área:");
        PanelModificar1.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 220, -1, -1));

        BntRegistrar.setText("Registrar");
        BntRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BntRegistrarActionPerformed(evt);
            }
        });
        PanelModificar1.add(BntRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 279, -1, -1));

        jLabel33.setText("Id Jefe:");
        PanelModificar1.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 248, -1, -1));
        PanelModificar1.add(TxtEmpJefe, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 248, 150, -1));

        add(PanelModificar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 274, 310));
    }// </editor-fold>//GEN-END:initComponents

    private void cargarComboAreas() {
        CboxArea.removeAllItems();
        CboxModArea.removeAllItems();

        CboxArea.addItem("Seleccionar");
        CboxModArea.addItem("Seleccionar");

        for (Area area : gestor.getMisAreas()) {
            String nombre = area.getNombre();
            CboxArea.addItem(nombre);
            CboxModArea.addItem(nombre);
        }
        
        TxtCargo.setEditable(false);
    }
    
    private boolean validarJerarquia(Empleado emp, Empleado empJefe) {
        if (emp instanceof Operario) {
            if (!(empJefe instanceof Supervisor)) {
                JOptionPane.showMessageDialog(this,
                    "Un Operario debe ser supervisado por un Supervisor.",
                    "Jerarquía inválida", JOptionPane.WARNING_MESSAGE);
                return false;
            }
        }
        else if (emp instanceof Supervisor) {
            if (!(empJefe instanceof Jefe)) {
                JOptionPane.showMessageDialog(this,
                    "Un Supervisor debe reportar a un Jefe.",
                    "Jerarquía inválida", JOptionPane.WARNING_MESSAGE);
                return false;
            }
        }
        // Jefe no necesita validación de jefe
        return true;
    }
    
    private void limpiarCampos(){
        // Registro
        TxtEmpID.setText("");
        TxtEmpNom.setText("");
        TxtEmpApp.setText("");
        TxtEmpDNI.setText("");
        TxtEmpCorreo.setText("");
        CboxContr.setSelectedIndex(0);
        CboxCargo.setSelectedIndex(0);
        CboxArea.setSelectedIndex(0);
        TxtEmpJefe.setText("");

        // Modificar
        TxtModID.setText("");
        TxtModNom.setText("");
        TxtModApp.setText("");
        TxtModDNI.setText("");
        TxtModCorreo.setText("");
        CboxModCont.setSelectedIndex(0);
        CboxModArea.setSelectedIndex(0);
        TxtModJefe.setEditable(true);
        TxtCargo.setText("");
        TxtModJefe.setText("");
        BtnMod.setText("Buscar");
        TxtModID.setEditable(true);
    }  
    
    private TipoContrato getTipoContrato(String combo){
        switch (combo) {
            case "DISCAPACIDAD": return TipoContrato.DISCAPACIDAD;
            case "TEMPORAL":     return TipoContrato.TEMPORAL;
            case "RENOVABLE":    return TipoContrato.RENOVABLE;
            case "INDEFINIDO":   return TipoContrato.INDEFINIDO;
            case "DESPEDIDO":    return TipoContrato.DESPEDIDO;
            default:
                JOptionPane.showMessageDialog(this, "Tipo de contrato no válido.");
                return null;
        }
    }
    
    private DefaultTableModel configurarTabla() {
        DefaultTableModel m = new DefaultTableModel();
        m.setColumnIdentifiers(new String[]{"ID", "Nombre", "Cargo", "Contrato"});
        tbLista.setModel(m);
        return m;
    }
    
    // Método auxiliar para limpiar sólo el panel de despido
    private void limpiarCamposDespedir() {
        TxtBusID.setText("");
        TxtBusNom.setText("");
        TxtBusApp.setText("");
        TxtBusDNI.setText("");
        TxtBusCorreo.setText("");
    }

    // Método opcional para recargar la JTable de empleados
    private void refrescarTablaEmpleados() {
        DefaultTableModel model = (DefaultTableModel) tbLista.getModel();
        model.setRowCount(0);
        
        
        
        for (Empleado e : gestor.getMisEmpleados()) {
            String cargo = e instanceof Operario ? "OPERARIO" :
                           e instanceof Supervisor ? "SUPERVISOR" :
                           e instanceof Jefe ? "JEFE" : "DESCONOCIDO";

            model.addRow(new Object[]{
                e.getId(),
                e.getNombre() + " " + e.getApellido(),
                cargo,
                e.getTipoContrato()
            });
        }
    }
    
    private void btnMostrarAsisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarAsisActionPerformed
        // 1) Validar que el campo no esté vacío
        String textoId = TxtBusID.getText().trim();
        if (textoId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa una ID.");
            return;
        }

        // 2) Validar que haya empleados cargados
        if (gestor.getMisEmpleados().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay empleados registrados.");
            return;
        }

        // 3) Parsear de forma segura
        int id;
        try {
            id = Integer.parseInt(textoId);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error... El ID debe ser un número válido.");
            return;
        }

        // 4) Buscar empleado y rellenar campos
        Empleado emp = gestor.getEmpleado(id);
        if (emp != null) {
            // No volvemos a setear TxtBusID, mantenemos el mismo valor
            TxtBusNom.setText(emp.getNombre());
            TxtBusApp.setText(emp.getApellido());
            TxtBusDNI.setText(emp.getDni());
            TxtBusCorreo.setText(emp.getEmail());
        } else {
            JOptionPane.showMessageDialog(this, "Error... No existe un empleado con ID " + id + ".");
            TxtBusNom.setText("");
            TxtBusApp.setText("");
            TxtBusDNI.setText("");
            TxtBusCorreo.setText("");
        }
    }//GEN-LAST:event_btnMostrarAsisActionPerformed

    private void BntRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BntRegistrarActionPerformed
        // 1. Tomar y validar campos vacíos
        String textoId     = TxtEmpID.getText().trim();
        String nombre      = TxtEmpNom.getText().trim();
        String apellido    = TxtEmpApp.getText().trim();
        String dni         = TxtEmpDNI.getText().trim();
        String correo      = TxtEmpCorreo.getText().trim();
        String contratoSel = CboxContr.getSelectedItem().toString();
        String cargoSel    = CboxCargo.getSelectedItem().toString();
        String areaSel     = CboxArea.getSelectedItem().toString();
        String textoJefe   = TxtEmpJefe.getText().trim();

        if (textoId.isEmpty() || nombre.isEmpty() || apellido.isEmpty() ||
            dni.isEmpty() || correo.isEmpty() ||
            "Seleccionar".equals(contratoSel) ||
            "Seleccionar".equals(cargoSel) ||
            "Seleccionar".equals(areaSel) ||
            (!"JEFE".equals(cargoSel) && textoJefe.isEmpty())) {

            JOptionPane.showMessageDialog(this,
                "Completa todos los campos por favor :)");
            return;
        }

        // 2. Parsear ID del empleado
        int idNuevo;
        try {
            idNuevo = Integer.parseInt(textoId);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                "Error... El ID debe ser un número válido.");
            return;
        }

        // 3. Verificar que no exista ya
        if (gestor.getEmpleado(idNuevo) != null) {
            JOptionPane.showMessageDialog(this,
                "Error... Ya existe un empleado con esa ID.");
            return;
        }

        // 4. Parsear y verificar jefe (si aplica)
        int idJefe = 0;
        Empleado empJefe = null;
        if (!"JEFE".equals(cargoSel)) {
            try {
                idJefe = Integer.parseInt(textoJefe);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this,
                    "Error... El ID del jefe debe ser un número.");
                return;
            }
            empJefe = gestor.getEmpleado(idJefe);
            if (empJefe == null) {
                JOptionPane.showMessageDialog(this,
                    "Error... No existe un jefe con esa ID.");
                return;
            }
        }

        // 5. Obtener idArea
        int idArea = -1;
        for (Area area : gestor.getMisAreas()) {
            if (areaSel.equals(area.getNombre())) {
                idArea = area.getIdArea();
                break;
            }
        }
        if (idArea < 0) {
            JOptionPane.showMessageDialog(this, "Error... Área no válida.");
            return;
        }

        // 6. Obtener TipoContrato
        TipoContrato tipoCont = getTipoContrato(contratoSel);
        if (tipoCont == null) return;  // el método ya muestra mensaje

        // 7. Validar jerarquía creando un objeto temporal
        Empleado temp;
        switch (cargoSel) {
            case "OPERARIO":
                temp = new Operario(idArea, 0, 0,
                                    nombre, apellido, correo, dni,
                                    null, null, tipoCont, idJefe);
                break;
            case "SUPERVISOR":
                temp = new Supervisor(idArea, 0, 0,
                                      nombre, apellido, correo, dni,
                                      null, null, tipoCont, idJefe);
                break;
            default: // JEFE
                temp = new Jefe(idArea, 0, 0,
                                nombre, apellido, correo, dni,
                                null, null, tipoCont);
                break;
        }
        if (empJefe != null && !validarJerarquia(temp, empJefe)) {
            return; // detiene el registro si la jerarquía es inválida
        }

        // 8. Crear y agregar el empleado real
        int nextIndex = gestor.getMisEmpleados().size();
        switch (cargoSel) {
            case "OPERARIO":
                Operario op = new Operario(idArea, 5, nextIndex,
                                           nombre, apellido, correo, dni,
                                           null, null, tipoCont, idJefe);
                gestor.addEmpleado(op);
                break;
            case "SUPERVISOR":
                Supervisor sup = new Supervisor(idArea, 7.5, nextIndex,
                                                nombre, apellido, correo, dni,
                                                null, null, tipoCont, idJefe);
                gestor.addEmpleado(sup);
                break;
            default:  // JEFE
                Jefe jefe = new Jefe(idArea, 10, nextIndex,
                                      nombre, apellido, correo, dni,
                                      null, null, tipoCont);
                gestor.addEmpleado(jefe);
                break;
        }

        // 9. Limpiar formulario y refrescar
        limpiarCampos();
        JOptionPane.showMessageDialog(this,
            "Empleado registrado correctamente.");
        refrescarTablaEmpleados();
    }//GEN-LAST:event_BntRegistrarActionPerformed

    private void btnDespedirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDespedirActionPerformed
        // 1) Validar campo vacío
        String textoId = TxtBusID.getText().trim();
        if (textoId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa una ID.");
            return;
        }

        // 2) Validar que existan empleados
        if (gestor.getMisEmpleados().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay empleados registrados.");
            return;
        }

        // 3) Parsear el ID
        int idBuscado;
        try {
            idBuscado = Integer.parseInt(textoId);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID debe ser un número válido.");
            return;
        }

        // 4) Buscar el empleado
        Empleado emp = gestor.getEmpleado(idBuscado);
        if (emp == null) {
            JOptionPane.showMessageDialog(this, "Error... No existe un empleado con ID " + idBuscado + ".");
            return;
        }

        // 5) Confirmación de eliminación
        int opcion = JOptionPane.showConfirmDialog(
            this,
            "¿Estás seguro de eliminar al empleado con ID " + idBuscado + " (" + emp.getNombre() + " " + emp.getApellido() + ")?",
            "Confirmar eliminación",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        if (opcion != JOptionPane.YES_OPTION) {
            // Si el usuario cancela, limpiamos los campos de búsqueda
            limpiarCamposDespedir();
            return;
        }

        // 6) Eliminar y actualizar interfaz
        gestor.dropEmpleado(emp);
        JOptionPane.showMessageDialog(this, "Empleado eliminado correctamente.");

        // (Opcional) Refrescar tabla de lista si la tienes visible
        refrescarTablaEmpleados();

        // 7) Limpiar campos de búsqueda
        limpiarCamposDespedir();
        
    }//GEN-LAST:event_btnDespedirActionPerformed

    private void BtnModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnModActionPerformed
        Empleado emp;
        int id;
        if (BtnMod.getText().equals("Buscar")) {
            // Modo Buscar
            try {
                id = Integer.parseInt(TxtModID.getText().trim());
                emp = gestor.getEmpleado(id);

                if (emp == null) {
                    JOptionPane.showMessageDialog(this, "Error... No existe el empleado.");
                    return;
                }

                TxtModID.setText(String.valueOf(emp.getId()));
                TxtModNom.setText(emp.getNombre());
                TxtModApp.setText(emp.getApellido());
                TxtModDNI.setText(emp.getDni());
                TxtModCorreo.setText(emp.getEmail());
                
                String areaNombre = gestor.getArea(emp.getAreaLabor()).getNombre();
                
                for(int i = 0; i < CboxModArea.getItemCount(); i++){
                    if(areaNombre.equalsIgnoreCase(CboxModArea.getItemAt(i))){
                        CboxModArea.setSelectedIndex(i);
                    }
                }
                
                if(emp.getTipoContrato() != null)
                    switch (emp.getTipoContrato()) {
                    case DISCAPACIDAD:
                        CboxModCont.setSelectedIndex(1);
                        break;
                    case TEMPORAL:
                        CboxModCont.setSelectedIndex(2);
                        break;
                    case RENOVABLE:
                        CboxModCont.setSelectedIndex(3);
                        break;
                    case INDEFINIDO:
                        CboxModCont.setSelectedIndex(4);
                        break;
                    case DESPEDIDO:
                        CboxModCont.setSelectedIndex(5);
                        break;
                    default:
                        break;
                }
                
                if(emp instanceof Operario){
                    Operario  op = (Operario)emp;
                    TxtModJefe.setText(String.valueOf(op.getIdSupervisor()));
                    TxtModJefe.setEditable(true);
                    TxtCargo.setText("Operario");
                } else if(emp instanceof Supervisor){
                    Supervisor  op = (Supervisor)emp;
                    TxtModJefe.setText(String.valueOf(op.getIdJefe()));
                    TxtModJefe.setEditable(true);
                    TxtCargo.setText("Supervisor");
                } else {
                    TxtModJefe.setText(null);
                    TxtModJefe.setEditable(false);
                    TxtCargo.setText("Jefe");
                }
                
                TxtModID.setEditable(false);
                BtnMod.setText("Modificar");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error... Número inválido.");
            }
            return;
        }

        // Modo Modificar
        // 1) Validar campos
        String nombre   = TxtModNom.getText().trim();
        String apellido = TxtModApp.getText().trim();
        String dni      = TxtModDNI.getText().trim();
        String correo   = TxtModCorreo.getText().trim();
        String tipoSel  = CboxModCont.getSelectedItem().toString();
        String areaSel  = CboxModArea.getSelectedItem().toString();
        String txtJefe  = TxtModJefe.getText().trim();
        
        id = Integer.parseInt(TxtModID.getText().trim());
        emp = gestor.getEmpleado(id);
        
        if(emp instanceof Jefe){
            txtJefe  = "0";
        }
        
        boolean camposIncompletos = TxtModID.getText().isEmpty() || nombre.isEmpty() || apellido.isEmpty() ||
                                    dni.isEmpty() || correo.isEmpty() ||
                                    "Seleccionar".equals(tipoSel) ||
                                    "Seleccionar".equals(areaSel) ||
                                    txtJefe.isEmpty();

        if (camposIncompletos) {
            JOptionPane.showMessageDialog(this, "Completa todos los campos por favor.");
            return;
        }
        
        // 2) Validar jefe si no es JEFE
        if (!(emp instanceof Jefe)) {            
            int idJefe;
            
            try {
                idJefe = Integer.parseInt(txtJefe);
                Empleado empJefe = gestor.getEmpleado(idJefe);
                if (empJefe == null) {
                    JOptionPane.showMessageDialog(this, "No existe un jefe con ID " + idJefe + ".");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID del jefe debe ser un número.");
                return;
            }
            
            idJefe = Integer.parseInt(txtJefe);
            
            Empleado empAct = gestor.getEmpleado(id);
            Empleado empJefe = gestor.getEmpleado(idJefe);

            if (!validarJerarquia(empAct, empJefe)) {
                return;
            }

            if (empAct instanceof Operario) {
                Operario op = (Operario) empAct;
                op.setIdSupervisor(idJefe);
            } else if (empAct instanceof Supervisor) {
                Supervisor op = (Supervisor) empAct;
                op.setIdJefe(idJefe);
            }
        }

        
        // 4) Obtener empleado a modificar
        if (emp == null) {
            JOptionPane.showMessageDialog(this, "No existe un empleado con ID " + id + ".");
            limpiarCampos();
            return;
        }

        // 5) Actualizar datos personales
        emp.setNombre(nombre);
        emp.setApellido(apellido);
        emp.setDni(dni);
        emp.setEmail(correo);

        // 6) Establecer tipo de contrato
        TipoContrato tipoCont = getTipoContrato(tipoSel);
        if (tipoCont == null) return;
        emp.setTipoContrato(tipoCont);

        // 9) Asignar área
        int idArea = -1;
        for (Area area : gestor.getMisAreas()) {
            if (areaSel.equals(area.getNombre())) {
                idArea = area.getIdArea();
                break;
            }
        }
        if (idArea < 0) {
            JOptionPane.showMessageDialog(this, "Error... Área no válida.");
            return;
        }
        emp.setAreaLabor(idArea);

        // 10) Confirmación
        JOptionPane.showMessageDialog(this, "Empleado modificado correctamente.");
        limpiarCampos();
    }//GEN-LAST:event_BtnModActionPerformed

    private void CboxCargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CboxCargoActionPerformed

        if(CboxCargo.getSelectedIndex() == 3){
            TxtEmpJefe.setEditable(false);
            TxtEmpJefe.setText(null);
        }
        
    }//GEN-LAST:event_CboxCargoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // Limpiar la tabla
        DefaultTableModel model = (DefaultTableModel) tbLista.getModel();
        model.setRowCount(0);
        
        int indexSelc = jtBuscar.getSelectedIndex();
        
        switch (indexSelc){
            case 0: 
                if(txtIdBuscar.getText().isEmpty()){
                    // Agregar filas de empleados
                    refrescarTablaEmpleados();
                } else {
                    try{
                        int id = Integer.parseInt(txtIdBuscar.getText());
                        Empleado emp = gestor.getEmpleado(id);
                        
                        String cargo = emp instanceof Operario ? "OPERARIO" :
                                    emp instanceof Supervisor ? "SUPERVISOR" :
                                    emp instanceof Jefe ? "JEFE" : "DESCONOCIDO";
                        
                        if (emp != null){
                            model.addRow(new Object[]{
                                emp.getId(),
                                emp.getNombre() + " " + emp.getApellido(),
                                cargo,
                                emp.getTipoContrato()
                            }); 
                            // Asignar el modelo a la tabla:
                            tbLista.setModel(modelo);
                        } else {
                            JOptionPane.showMessageDialog(this, "Error... No existe el empleado.");
                        }
                    }catch(NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Error... Número inválido.");
                    }
                }
                break;
            case 1 :
                String nombreCargo = CboxBusqCargo.getSelectedItem().toString();
                
                // Agregar filas de empleados
                for (Empleado emp : gestor.getMisEmpleados()){
                    if (emp != null) {
                        boolean coincide = false;
                        switch (nombreCargo) {
                            case "OPERARIO":
                                coincide = emp instanceof Operario;
                                break;
                            case "SUPERVISOR":
                                coincide = emp instanceof Supervisor;
                                break;
                            case "JEFE":
                                coincide = emp instanceof Jefe;
                                break;
                            case "TODOS":
                                coincide = true;
                                break;
                        }

                        String cargo = emp instanceof Operario ? "OPERARIO" :
                                    emp instanceof Supervisor ? "SUPERVISOR" :
                                    emp instanceof Jefe ? "JEFE" : "DESCONOCIDO";

                        
                        if (coincide) {
                            modelo.addRow(new Object[]{
                                emp.getId(),
                                emp.getNombre() + " " + emp.getApellido(),
                                cargo,
                                emp.getTipoContrato()
                            });
                        }
                    }
                }
                break;
            case 2: 
                // Agregar filas de empleados
                for (Empleado emp : gestor.getMisEmpleados()){

                    String TipoContratoEmp = CboxBusContr.getSelectedItem().toString();

                    TipoContrato tipoContr = getTipoContrato(TipoContratoEmp);

                    if(emp.getTipoContrato() ==  tipoContr){
                        String cargo = emp instanceof Operario ? "OPERARIO" :
                                    emp instanceof Supervisor ? "SUPERVISOR" :
                                    emp instanceof Jefe ? "JEFE" : "DESCONOCIDO";

                        if (emp != null) {
                            model.addRow(new Object[]{
                                emp.getId(),
                                emp.getNombre() + " " + emp.getApellido(),
                                cargo,
                                emp.getTipoContrato()
                            }); 
                        // Asignar el modelo a la tabla:
                        tbLista.setModel(modelo);
                        }
                    }
                }
            
            break;
            
        } 
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void CboxModContActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CboxModContActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CboxModContActionPerformed

    private void TxtModIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtModIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtModIDActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BntRegistrar;
    private javax.swing.JButton BtnMod;
    private javax.swing.JComboBox<String> CboxArea;
    private javax.swing.JComboBox<String> CboxBusContr;
    private javax.swing.JComboBox<String> CboxBusqCargo;
    private javax.swing.JComboBox<String> CboxCargo;
    private javax.swing.JComboBox<String> CboxContr;
    private javax.swing.JComboBox<String> CboxModArea;
    private javax.swing.JComboBox<String> CboxModCont;
    private javax.swing.JPanel PanelBusqueda;
    private javax.swing.JPanel PanelDespedir;
    private javax.swing.JPanel PanelModificar;
    private javax.swing.JPanel PanelModificar1;
    private javax.swing.JTextField TxtBusApp;
    private javax.swing.JTextField TxtBusCorreo;
    private javax.swing.JTextField TxtBusDNI;
    private javax.swing.JTextField TxtBusID;
    private javax.swing.JTextField TxtBusNom;
    private javax.swing.JTextField TxtCargo;
    private javax.swing.JTextField TxtEmpApp;
    private javax.swing.JTextField TxtEmpCorreo;
    private javax.swing.JTextField TxtEmpDNI;
    private javax.swing.JTextField TxtEmpID;
    private javax.swing.JTextField TxtEmpJefe;
    private javax.swing.JTextField TxtEmpNom;
    private javax.swing.JTextField TxtModApp;
    private javax.swing.JTextField TxtModCorreo;
    private javax.swing.JTextField TxtModDNI;
    private javax.swing.JTextField TxtModID;
    private javax.swing.JTextField TxtModJefe;
    private javax.swing.JTextField TxtModNom;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnDespedir;
    private javax.swing.JButton btnMostrarAsis;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jsEmpleados;
    private javax.swing.JTabbedPane jtBuscar;
    private javax.swing.JLabel lbIdAreaBuscar;
    private javax.swing.JLabel lblBuscarOpc;
    private javax.swing.JLabel lblEstadoBuscar;
    private javax.swing.JLabel lblIDBuscar;
    private javax.swing.JPanel panelAreaBuscar;
    private javax.swing.JPanel panelEstadoLaboralBuscar;
    private javax.swing.JPanel panelIdBuscar;
    private javax.swing.JTable tbLista;
    private javax.swing.JTextField txtIdBuscar;
    // End of variables declaration//GEN-END:variables
}
